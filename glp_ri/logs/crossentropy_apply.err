/nfs/home/lverho/miniforge3/envs/glp/lib/python3.11/site-packages/torch/_utils.py:831: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  return self.fget.__get__(instance, owner)()
Traceback (most recent call last):
  File "/nfs/home/lverho/glp/glp_ri/apply_model.py", line 31, in <module>
    cnn_model.load_state_dict(torch.load("./saved_models/glp_cnn.pt", weights_only=True))
  File "/nfs/home/lverho/miniforge3/envs/glp/lib/python3.11/site-packages/torch/nn/modules/module.py", line 2152, in load_state_dict
    raise RuntimeError('Error(s) in loading state_dict for {}:\n\t{}'.format(
RuntimeError: Error(s) in loading state_dict for CNN:
	Missing key(s) in state_dict: "conv_layers.3.0.weight", "conv_layers.3.0.bias", "conv_layers.3.2.weight", "conv_layers.3.2.bias", "conv_layers.3.2.running_mean", "conv_layers.3.2.running_var", "conv_layers.3.3.weight", "conv_layers.3.3.bias", "conv_layers.3.5.weight", "conv_layers.3.5.bias", "conv_layers.3.5.running_mean", "conv_layers.3.5.running_var". 
	Unexpected key(s) in state_dict: "conv_layers.6.0.weight", "conv_layers.6.0.bias", "conv_layers.6.2.weight", "conv_layers.6.2.bias", "conv_layers.6.2.running_mean", "conv_layers.6.2.running_var", "conv_layers.6.2.num_batches_tracked", "conv_layers.6.3.weight", "conv_layers.6.3.bias", "conv_layers.6.5.weight", "conv_layers.6.5.bias", "conv_layers.6.5.running_mean", "conv_layers.6.5.running_var", "conv_layers.6.5.num_batches_tracked". 
	size mismatch for conv_layers.0.0.weight: copying a param with shape torch.Size([8, 1, 3, 3, 1]) from checkpoint, the shape in current model is torch.Size([8, 1, 3, 3]).
	size mismatch for conv_layers.0.3.weight: copying a param with shape torch.Size([8, 8, 3, 3, 1]) from checkpoint, the shape in current model is torch.Size([8, 8, 3, 3]).
	size mismatch for conv_layers.1.0.weight: copying a param with shape torch.Size([16, 8, 3, 3, 1]) from checkpoint, the shape in current model is torch.Size([16, 8, 3, 3]).
	size mismatch for conv_layers.1.3.weight: copying a param with shape torch.Size([16, 16, 3, 3, 1]) from checkpoint, the shape in current model is torch.Size([16, 16, 3, 3]).
	size mismatch for conv_layers.2.0.weight: copying a param with shape torch.Size([32, 16, 3, 3, 1]) from checkpoint, the shape in current model is torch.Size([32, 16, 3, 3]).
	size mismatch for conv_layers.2.3.weight: copying a param with shape torch.Size([32, 32, 3, 3, 1]) from checkpoint, the shape in current model is torch.Size([32, 32, 3, 3]).
	size mismatch for conv_layers.4.0.weight: copying a param with shape torch.Size([64, 32, 3, 3, 1]) from checkpoint, the shape in current model is torch.Size([128, 64, 3, 3]).
	size mismatch for conv_layers.4.0.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for conv_layers.4.2.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for conv_layers.4.2.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for conv_layers.4.2.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for conv_layers.4.2.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for conv_layers.4.3.weight: copying a param with shape torch.Size([64, 64, 3, 3, 1]) from checkpoint, the shape in current model is torch.Size([128, 128, 3, 3]).
	size mismatch for conv_layers.4.3.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for conv_layers.4.5.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for conv_layers.4.5.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for conv_layers.4.5.running_mean: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for conv_layers.4.5.running_var: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for conv_layers.5.0.weight: copying a param with shape torch.Size([128, 64, 3, 3, 1]) from checkpoint, the shape in current model is torch.Size([256, 128, 3, 3]).
	size mismatch for conv_layers.5.0.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for conv_layers.5.2.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for conv_layers.5.2.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for conv_layers.5.2.running_mean: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for conv_layers.5.2.running_var: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for conv_layers.5.3.weight: copying a param with shape torch.Size([128, 128, 3, 3, 1]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
	size mismatch for conv_layers.5.3.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for conv_layers.5.5.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for conv_layers.5.5.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for conv_layers.5.5.running_mean: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for conv_layers.5.5.running_var: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for dense_layers.0.weight: copying a param with shape torch.Size([1740, 61440]) from checkpoint, the shape in current model is torch.Size([1740, 10240]).
